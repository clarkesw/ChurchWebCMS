https://www.baeldung.com/spring-boot-custom-error-page
Tom Cartwright, and his daughter, Allison - invention help

add-event.jsp
                     <fieldset class="form-group">
				<form:label path="staff">Contact Person</form:label> 
                                
                                <form:select path="staff">
                                    <form:option value="NONE" label="--- Select ---"/>
                                    <form:options items="${firstName}" />
                                 </form:select>
                                <form:errors path="staff" cssClass="text-warning"/>
			</fieldset>


list-events.jsp
${event.isRepeated}


  <td><fmt:formatDate value="${event.start}"/></td>
  <td><fmt:formatDate value="${event.end}"/></td>

        protected void configure(HttpSecurity http) throws Exception {
                http.authorizeRequests().antMatchers("/login").permitAll()
                                .antMatchers("/*todo*/**", "/*event*/**").access("hasRole('USER')").and()
                                .formLogin();
        }


/*
{
  "defaultDate": "11-15-18",
  "editable": false,
  "eventLimit": true,
  "events": [{"title": "First Event","start": "2018-11-26T10:00:00","end": "2018-11-26T10:30:00"}]
}
*/

insert into ChurchDB.church
values (1,null,"church@milford.com","Clarence","C3","Milford Baptist","919-368-6332",null,1);

insert into ChurchDB.address
values (1, "Smyrna", "GA", "23 Millford Church Rd",30060);

    <li class="primary"><a href="/" >Social</a>
    <ul>
        <li><a class="primary">FB</a></li>
      <!--  <li class="leaf"><a href="https://instagram.com/gatewaypeople" class="social instagram" target="_blank"><i class="fa fa-instagram"></i></a></li> -->
        <li><a class="primary">TW</a></li>
    </ul>

       <!--     <div id="banner">
                <marquee behavior="scroll" direction="left">${banner.message}</marquee>
            </div> /.header-inner -->


        <script>
              $(function()
                {
                    $('#wysiwyg').wysiwyg();
                });
        </script>
        <script>
            function copyLinkFunc() {
              var copyText = document.getElementById("myInput");
              copyText.select();
              copyText.setSelectionRange(0, 99999)
              document.execCommand("copy");
             // alert("Copied Passage Link: " + copyText.value +"\n\n Now paste where you want it in description below");
            }
        </script> 

--------------------------------------------------
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.milford.churchcms.security;

import com.milford.churchcms.controller.WelcomeController;
import com.milford.churchcms.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

//@Configuration
//@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

    @Autowired
    UserService userService;
    
    @Bean
    public AuthenticationProvider authProvider(){
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        logger.debug("   authProvider()");
        provider.setUserDetailsService(userService);
        provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
        logger.debug("   Provider : {}", provider);
        return provider;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {

            http.authorizeRequests().antMatchers("/login","/index*","/h2/**").permitAll()
                                .antMatchers("/*article*/**").access("hasRole('USER')");  

//                        .deleteCookies("JSESSIONID")    
            http
                .csrf().disable()
                .headers().frameOptions().disable();
                
            http
                .formLogin().loginPage("/login").permitAll()
                .and()
                .authorizeRequests().antMatchers("/login").permitAll()
                .and()
                .logout().invalidateHttpSession(true)
                .clearAuthentication(true)
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                .logoutSuccessUrl("/login").permitAll();
    }
       
//    @Bean
//    @SuppressWarnings("depercation")
//    public static NoOpPasswordEncoder passwordEncoder(){
//        return (NoOpPasswordEncoder) NoOpPasswordEncoder.getInstance();
//    }

}
